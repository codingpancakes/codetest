{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetSignedUrlLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/plantista-pipeline-dev-getSignedUrl"
      }
    },
    "UploadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/plantista-pipeline-dev-upload"
      }
    },
    "GenerationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/plantista-pipeline-dev-generation"
      }
    },
    "ScalarTriggerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/plantista-pipeline-dev-scalarTrigger"
      }
    },
    "ScalarStartLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ScalarStartFunction"
      }
    },
    "ScalarCheckLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/ScalarCheckFunction"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "plantista-pipeline",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ScalarStartFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ScalarCheckFunction:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/plantista-pipeline-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ScalarStartFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/ScalarCheckFunction:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/plantista-pipeline-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject"
                  ],
                  "Resource": "arn:aws:s3:::segmentationstack-imagebucket97210811-o7ponc5a3zlf/*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution",
                    "states:DescribeExecution",
                    "states:GetExecutionHistory"
                  ],
                  "Resource": [
                    "arn:aws:states:us-east-1:815288555158:stateMachine:*",
                    "arn:aws:states:us-east-1:815288555158:execution:*:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:us-east-1:815288555158:log-group:/aws/lambda/*:*:*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "plantista-pipeline",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetSignedUrlLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/plantista-pipeline/dev/1735764493098-2025-01-01T20:48:13.098Z/getSignedUrl.zip"
        },
        "Handler": "leonardo/getsignedurl.lambda_handler",
        "Runtime": "python3.11",
        "FunctionName": "plantista-pipeline-dev-getSignedUrl",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "segmentationstack-imagebucket97210811-o7ponc5a3zlf",
            "LEONARDO_API_KEY": "ef89b7c6-b397-430e-b8fe-9999eb9175ff",
            "LEONARDO_API_URL": "https://cloud.leonardo.ai/api/rest/v1",
            "SCALAR_API_KEY": "64916f13-e9ba-44af-9284-b87df4d9e12b",
            "SCALAR_STATE_MACHINE_ARN": {
              "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:scalar-pipeline-dev"
            },
            "STATE_MACHINE_ARN": "arn:aws:states:us-east-1:815288555158:stateMachine:plantista-pipeline-dev"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "PythonLibsLayer"
          },
          "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p311-Pillow:6"
        ]
      },
      "DependsOn": [
        "GetSignedUrlLogGroup"
      ]
    },
    "UploadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/plantista-pipeline/dev/1735764493098-2025-01-01T20:48:13.098Z/upload.zip"
        },
        "Handler": "leonardo/upload.lambda_handler",
        "Runtime": "python3.11",
        "FunctionName": "plantista-pipeline-dev-upload",
        "MemorySize": 1024,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "segmentationstack-imagebucket97210811-o7ponc5a3zlf",
            "LEONARDO_API_KEY": "ef89b7c6-b397-430e-b8fe-9999eb9175ff",
            "LEONARDO_API_URL": "https://cloud.leonardo.ai/api/rest/v1",
            "SCALAR_API_KEY": "64916f13-e9ba-44af-9284-b87df4d9e12b",
            "SCALAR_STATE_MACHINE_ARN": {
              "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:scalar-pipeline-dev"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "PythonLibsLayer"
          },
          "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p311-Pillow:6"
        ]
      },
      "DependsOn": [
        "UploadLogGroup"
      ]
    },
    "GenerationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/plantista-pipeline/dev/1735764493098-2025-01-01T20:48:13.098Z/generation.zip"
        },
        "Handler": "leonardo/generation.lambda_handler",
        "Runtime": "python3.11",
        "FunctionName": "plantista-pipeline-dev-generation",
        "MemorySize": 1024,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "segmentationstack-imagebucket97210811-o7ponc5a3zlf",
            "LEONARDO_API_KEY": "ef89b7c6-b397-430e-b8fe-9999eb9175ff",
            "LEONARDO_API_URL": "https://cloud.leonardo.ai/api/rest/v1",
            "SCALAR_API_KEY": "64916f13-e9ba-44af-9284-b87df4d9e12b",
            "SCALAR_STATE_MACHINE_ARN": {
              "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:scalar-pipeline-dev"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "PythonLibsLayer"
          },
          "arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p311-Pillow:6"
        ]
      },
      "DependsOn": [
        "GenerationLogGroup"
      ]
    },
    "ScalarTriggerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/plantista-pipeline/dev/1735764493098-2025-01-01T20:48:13.098Z/scalarTrigger.zip"
        },
        "Handler": "scalar/trigger.lambda_handler",
        "Runtime": "python3.11",
        "FunctionName": "plantista-pipeline-dev-scalarTrigger",
        "MemorySize": 1024,
        "Timeout": 29,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "segmentationstack-imagebucket97210811-o7ponc5a3zlf",
            "LEONARDO_API_KEY": "ef89b7c6-b397-430e-b8fe-9999eb9175ff",
            "LEONARDO_API_URL": "https://cloud.leonardo.ai/api/rest/v1",
            "SCALAR_API_KEY": "64916f13-e9ba-44af-9284-b87df4d9e12b",
            "SCALAR_STATE_MACHINE_ARN": {
              "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:scalar-pipeline-dev"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "PythonLibsLayer"
          }
        ]
      },
      "DependsOn": [
        "ScalarTriggerLogGroup"
      ]
    },
    "ScalarStartLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/plantista-pipeline/dev/1735764493098-2025-01-01T20:48:13.098Z/scalarStart.zip"
        },
        "Handler": "scalar/handler.lambda_handler",
        "Runtime": "python3.11",
        "FunctionName": "ScalarStartFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "segmentationstack-imagebucket97210811-o7ponc5a3zlf",
            "LEONARDO_API_KEY": "ef89b7c6-b397-430e-b8fe-9999eb9175ff",
            "LEONARDO_API_URL": "https://cloud.leonardo.ai/api/rest/v1",
            "SCALAR_API_KEY": "64916f13-e9ba-44af-9284-b87df4d9e12b",
            "SCALAR_STATE_MACHINE_ARN": {
              "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:scalar-pipeline-dev"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "PythonLibsLayer"
          }
        ]
      },
      "DependsOn": [
        "ScalarStartLogGroup"
      ]
    },
    "ScalarCheckLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/plantista-pipeline/dev/1735764493098-2025-01-01T20:48:13.098Z/scalarCheck.zip"
        },
        "Handler": "scalar/handler.check_generation",
        "Runtime": "python3.11",
        "FunctionName": "ScalarCheckFunction",
        "MemorySize": 1024,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "S3_BUCKET": "segmentationstack-imagebucket97210811-o7ponc5a3zlf",
            "LEONARDO_API_KEY": "ef89b7c6-b397-430e-b8fe-9999eb9175ff",
            "LEONARDO_API_URL": "https://cloud.leonardo.ai/api/rest/v1",
            "SCALAR_API_KEY": "64916f13-e9ba-44af-9284-b87df4d9e12b",
            "SCALAR_STATE_MACHINE_ARN": {
              "Fn::Sub": "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:scalar-pipeline-dev"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Layers": [
          {
            "Ref": "PythonLibsLayer"
          }
        ]
      },
      "DependsOn": [
        "ScalarCheckLogGroup"
      ]
    },
    "GenerationLambdaVersionYnpXEp1Cp7f9oOTYxaMi4rrmJspRdXffcOXTEJsnk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GenerationLambdaFunction"
        },
        "CodeSha256": "wu6A+6/FMeizykhhxWtvXuHDekMFUixHC3bBuhXnKmI="
      }
    },
    "ScalarTriggerLambdaVersionCEIJAI0fFoJU5mU8l6rjzeUJkpzr1lY8aNA60HuyCY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ScalarTriggerLambdaFunction"
        },
        "CodeSha256": "wu6A+6/FMeizykhhxWtvXuHDekMFUixHC3bBuhXnKmI="
      }
    },
    "ScalarCheckLambdaVersionFiZMHG7IZENMU86br3qWCsNOzhL9AQOExTqs2u8zpVs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ScalarCheckLambdaFunction"
        },
        "CodeSha256": "wu6A+6/FMeizykhhxWtvXuHDekMFUixHC3bBuhXnKmI="
      }
    },
    "UploadLambdaVersionYhgV3TqzIAvGgloLxyQeKaDneIdIvelOZcq9xcJdg8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadLambdaFunction"
        },
        "CodeSha256": "wu6A+6/FMeizykhhxWtvXuHDekMFUixHC3bBuhXnKmI="
      }
    },
    "GetSignedUrlLambdaVersionkiSyhRwZaXIPRLchl5F3p6HiW1UbVZt9wEHUIumFM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetSignedUrlLambdaFunction"
        },
        "CodeSha256": "wu6A+6/FMeizykhhxWtvXuHDekMFUixHC3bBuhXnKmI="
      }
    },
    "ScalarStartLambdaVersionKwwGS8LkvIydTY6QqoOvj7gXxHfKxQG2k2TMIdfNOD4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ScalarStartLambdaFunction"
        },
        "CodeSha256": "wu6A+6/FMeizykhhxWtvXuHDekMFUixHC3bBuhXnKmI="
      }
    },
    "PlantistaDashpipelineDashdevRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-plantista-pipeline-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "GetSignedUrlLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "GetSignedUrlLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UploadLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UploadLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "GenerationLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "GenerationLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "ScalarDashpipelineDashdevRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-plantista-pipeline-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "ScalarStartLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "ScalarStartLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ScalarCheckLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "ScalarCheckLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "PlantistaDashpipelineDashdev": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"Comment\": \"Plantista Image Generation Pipeline\",\n  \"StartAt\": \"GetSignedUrl\",\n  \"States\": {\n    \"GetSignedUrl\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${7bf62343ee296a862d2dda3087575537}\",\n      \"Next\": \"Upload\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 2,\n          \"MaxAttempts\": 2,\n          \"BackoffRate\": 2\n        }\n      ]\n    },\n    \"Upload\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${038a5741ccc020f1eb33cc705516e49a}\",\n      \"Next\": \"Generation\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 2,\n          \"MaxAttempts\": 2,\n          \"BackoffRate\": 2\n        }\n      ]\n    },\n    \"Generation\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${13a6754236cefbe146f9ce9ff0c985a3}\",\n      \"End\": true,\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 2,\n          \"MaxAttempts\": 2,\n          \"BackoffRate\": 2\n        }\n      ]\n    }\n  }\n}",
            {
              "7bf62343ee296a862d2dda3087575537": {
                "Fn::GetAtt": [
                  "GetSignedUrlLambdaFunction",
                  "Arn"
                ]
              },
              "038a5741ccc020f1eb33cc705516e49a": {
                "Fn::GetAtt": [
                  "UploadLambdaFunction",
                  "Arn"
                ]
              },
              "13a6754236cefbe146f9ce9ff0c985a3": {
                "Fn::GetAtt": [
                  "GenerationLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "PlantistaDashpipelineDashdevRole",
            "Arn"
          ]
        },
        "StateMachineName": "plantista-pipeline-dev"
      },
      "DependsOn": [
        "PlantistaDashpipelineDashdevRole"
      ]
    },
    "ScalarDashpipelineDashdev": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"StartAt\": \"StartGeneration\",\n  \"States\": {\n    \"StartGeneration\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${a47d2aabc1e74b93674d5f9b0ccc1d1e}\",\n      \"Next\": \"WaitForGeneration\",\n      \"ResultPath\": \"$.generation\"\n    },\n    \"WaitForGeneration\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 10,\n      \"Next\": \"CheckGeneration\"\n    },\n    \"CheckGeneration\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${54b49c6b5562340e5987bf8f248aad63}\",\n      \"Next\": \"IsGenerationComplete\",\n      \"InputPath\": \"$.generation\",\n      \"ResultPath\": \"$.check\"\n    },\n    \"IsGenerationComplete\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.check.status\",\n          \"StringEquals\": \"completed\",\n          \"Next\": \"GenerationComplete\"\n        },\n        {\n          \"Variable\": \"$.check.status\",\n          \"StringEquals\": \"failed\",\n          \"Next\": \"GenerationFailed\"\n        }\n      ],\n      \"Default\": \"WaitForGeneration\"\n    },\n    \"GenerationComplete\": {\n      \"Type\": \"Succeed\"\n    },\n    \"GenerationFailed\": {\n      \"Type\": \"Fail\",\n      \"Cause\": \"Generation failed\"\n    }\n  }\n}",
            {
              "a47d2aabc1e74b93674d5f9b0ccc1d1e": {
                "Fn::GetAtt": [
                  "ScalarStartLambdaFunction",
                  "Arn"
                ]
              },
              "54b49c6b5562340e5987bf8f248aad63": {
                "Fn::GetAtt": [
                  "ScalarCheckLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "ScalarDashpipelineDashdevRole",
            "Arn"
          ]
        },
        "StateMachineName": "scalar-pipeline-dev"
      },
      "DependsOn": [
        "ScalarDashpipelineDashdevRole"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-plantista-pipeline",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceGetDashsignedDashurl": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "get-signed-url",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGeneration": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "generation",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceScalar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "scalar",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGetDashsignedDashurlOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetDashsignedDashurl"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGenerationOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGeneration"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodScalarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceScalar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGetDashsignedDashurlPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetDashsignedDashurl"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetSignedUrlLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetSignedUrlLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGenerationPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGeneration"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GenerationLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GenerationLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodScalarPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceScalar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ScalarTriggerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ScalarTriggerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1735764480217": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodGetDashsignedDashurlOptions",
        "ApiGatewayMethodUploadOptions",
        "ApiGatewayMethodGenerationOptions",
        "ApiGatewayMethodScalarOptions",
        "ApiGatewayMethodGetDashsignedDashurlPost",
        "ApiGatewayMethodUploadPost",
        "ApiGatewayMethodGenerationPost",
        "ApiGatewayMethodScalarPost"
      ]
    },
    "GetSignedUrlLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetSignedUrlLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GenerationLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GenerationLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ScalarTriggerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ScalarTriggerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PythonLibsLayer": {
      "Type": "AWS::Lambda::LayerVersion",
      "Properties": {
        "LayerName": "python-libs-dev",
        "Description": "Python dependencies for Plantista Pipeline",
        "CompatibleRuntimes": [
          "python3.11"
        ],
        "Content": {
          "S3Bucket": "segmentationstack-imagebucket97210811-o7ponc5a3zlf",
          "S3Key": "layers/python.zip"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-ServerlessDeploymentBucketName"
      }
    },
    "GenerationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GenerationLambdaVersionYnpXEp1Cp7f9oOTYxaMi4rrmJspRdXffcOXTEJsnk"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-GenerationLambdaFunctionQualifiedArn"
      }
    },
    "ScalarTriggerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ScalarTriggerLambdaVersionCEIJAI0fFoJU5mU8l6rjzeUJkpzr1lY8aNA60HuyCY"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-ScalarTriggerLambdaFunctionQualifiedArn"
      }
    },
    "ScalarCheckLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ScalarCheckLambdaVersionFiZMHG7IZENMU86br3qWCsNOzhL9AQOExTqs2u8zpVs"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-ScalarCheckLambdaFunctionQualifiedArn"
      }
    },
    "UploadLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadLambdaVersionYhgV3TqzIAvGgloLxyQeKaDneIdIvelOZcq9xcJdg8"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-UploadLambdaFunctionQualifiedArn"
      }
    },
    "GetSignedUrlLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetSignedUrlLambdaVersionkiSyhRwZaXIPRLchl5F3p6HiW1UbVZt9wEHUIumFM"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-GetSignedUrlLambdaFunctionQualifiedArn"
      }
    },
    "ScalarStartLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ScalarStartLambdaVersionKwwGS8LkvIydTY6QqoOvj7gXxHfKxQG2k2TMIdfNOD4"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-ScalarStartLambdaFunctionQualifiedArn"
      }
    },
    "PlantistaDashpipelineDashdevArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "PlantistaDashpipelineDashdev"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-PlantistaDashpipelineDashdevArn"
      }
    },
    "ScalarDashpipelineDashdevArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "ScalarDashpipelineDashdev"
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-ScalarDashpipelineDashdevArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-plantista-pipeline-dev-ServiceEndpoint"
      }
    }
  }
}